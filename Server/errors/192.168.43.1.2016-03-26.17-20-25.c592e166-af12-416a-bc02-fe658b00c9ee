(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'http_'"
p3
sS'layer'
p4
S'C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\applications\\assignment2\\controllers/complaints.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\n\n\n\ndef mainlist():\n\t\treturn dict(complaints=db((db.complaints.id>0) & (db.users.id==db.complaints.user_id)).select(orderby=~db.complaints.id))\n\ndef resolvedlist():\n\t\treturn dict(complaints=db((db.complaints.id>0) & (db.complaints.complaint_status==1) & (db.users.id==db.complaints.user_id)).select(orderby=~db.complaints.id))\n\ndef unresolvedlist():\n\t\treturn dict(complaints=db((db.complaints.id>0) & (db.complaints.complaint_status==0) & (db.users.id==db.complaints.user_id)).select(orderby=~db.complaints.id))\n\ndef complaint():\n    x=request.args[0]\n    comment_userid=db(db.comments.complaint_id==x).select().first().user_id\n    if (db.complaints.id==x):\n        u=db.complaints.user_id\n        v=db.complaints.concerned_user\n    else:\n        0\n    return dict(complaints=db((db.complaints.id==x) & (db.users.id==u)).select(),concerned_user=db((db.complaints.id==x) & (db.users.id==v)).select(), valid_user=db(db.valid_user.id>0).select(), comments=db((db.comments.complaint_id==x) & (db.users.id==comment_userid)).select())\n\n\ndef new():\n    if ("title" in request.vars) and ("description" in request.vars) and ("complaint_type" in request.vars):\n        title = str(request.vars["title"]).strip()\n        description = str(request.vars["description"]).strip()\n        complaint_type1 = int(request.vars["complaint_type"])\n        concerned_user1 = int(request.vars.concerned_user)\n    user_id1 = db(db.valid_user.id>0).select().first().user_id\n    ##for x in range(22,24):\n        ##db(db.complaints.id==x).delete()\n    db.complaints.insert(description=description,title=title,complaint_type=complaint_type1,concerned_user=concerned_user1,user_id=user_id1,)\n    return dict(success=True,complaints=db(db.complaints.id>0).select())\n\ndef post_comment():\n    if ("description" in request.vars) and ("complaint_id" in request.vars):\n        description = str(request.vars["description"]).strip()\n        complaint_id1 = int(request.vars["complaint_id"])\n    user_id1 = db(db.valid_user.id>0).select().first().user_id\n    ##for x in range(22,24):\n        ##db(db.complaints.id==x).delete()\n    value = db(db.complaints.id==complaint_id1).select().first().comment_users\n    commentarray = db(db.complaints.id==complaint_id1).select().first().comments\n    comment = db.comments.insert(description=description,user_id=user_id1,complaint_id=complaint_id1,)\n    db(db.complaints.id==complaint_id1).select().first().update_record(comment_users=value+[user_id1])\n    db(db.complaints.id==complaint_id1).select().first().update_record(comments=commentarray+[comment.id])\n    return dict(success=True,complaints=db(db.complaints.id==complaint_id1).select(),user=db(db.users.id==user_id1).select(),comment=db(db.comments.id==comment.id).select())\n\n\ndef upvote():\n    x=request.args[0]\n    user_id1 = int(db(db.valid_user.id>0).select().first().user_id)\n    value = db(db.complaints.id==x).select().first().upvote_users\n    db(db.complaints.id==x).select().first().update_record(upvote_users=value+[user_id1])\n    return dict(success=True,updated_complaint=db(db.complaints.id==x).select())\n\n\ndef downvote():\n    x=request.args[0]\n    user_id1 = int(db(db.valid_user.id>0).select().first().user_id)\n    value = db(db.complaints.id==x).select().first().downvote_users\n    db(db.complaints.id==x).select().first().update_record(downvote_users=value+[user_id1])\n    return dict(success=True,updated_complaint=db(db.complaints.id==x).select())\n\ndef resolve():\n    x=request.args[0]\n    db(db.complaints.id==x).select().first().update_record(complaint_status=1)\n    return dict(success=True,updated_complaint=db(db.complaints.id==x).select())\n\nresponse._vars=response._caller(complaint)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\applications\\assignment2\\controllers/complaints.py", line 73, in <module>\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\applications\\assignment2\\controllers/complaints.py", line 17, in complaint\n    comment_userid=db(db.comments.complaint_id==x).select().first().user_id\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2025, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 124, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1280, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1167, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\Parichay\\Downloads\\web2py_win\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1439, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'http_\'\n'
p11
s.